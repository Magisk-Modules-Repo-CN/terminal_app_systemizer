#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
ID="terminal_systemizer"

# Magisk Mod Directory
MOUNTPATH=/sbin/.core/img
MODDIR="$MOUNTPATH/$ID"
if [ ! -d $MODDIR ]; then
	echo "未找到模块!"
	exit 1
fi

#=========================== Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/cache/${ID}.log
oldLOG=/cache/${ID}-old.log
# > Verbose output goes here
VERLOG=/cache/${ID}-verbose.log
oldVERLOG=/cache/${ID}-verbose-old.log

#=========================== Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null
set -x 2>$VERLOG

#=========================== Load mod-util.sh
. $MODDIR/mod-util.sh || exit $?

#=========================== Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.

help_me() {
	cat << EOF
$MODTITLE $VER($REL)
by $AUTHOR
	
用法: $_name
   或: $_name [选项]......
   
选项:
    -nc                    删除 ANSI 控制码
    -a [包名]              将提供的包名系统化
    -d [apk目录]           系统化指定的apk
    -l                     列出所有系统化的app
    -h                     显示这个信息
EOF
exit
}

use_aapt=false
export PATH=$MODDIR:$PATH
[[ "$(which aapt)" ]] && use_aapt=true
sysapp=0
privapp=0
IFUPDATED=""
perm_xml1=$SYSTEM/etc/permissions/privapp-permissions-platform.xml
perm_xml=$MODDIR$SYSTEM2/etc/permissions/privapp-permissions-platform.xml
[ -f $perm_xml1 ] && patch_xml=true || patch_xml=false
mkdir -p $MODDIR$SYSTEM2/etc/permissions 2>/dev/null
LISTFILE=/cache/systemize.list
BOOTMODE=true
RESCAN=true
use_cmd=false
se_set=false

# Method
[ "$(grep_prop selinux $MODDIR/module.prop)" == "true" ] && { use_cmd=true; se_set=true; } || {
	[ $(getenforce) == "Permissive" ] && use_cmd=true || {
		[ $LOGNAME ] && use_cmd=true || use_cmd=false
	}
}
method="ls /data/data"
detect="codePath=$SYSTEM|targetSdk=0|codePath=/vendor/overlay"
if $use_cmd; then
	[ $API -le 23 ] && method="pm list packages -3"
	[ $API -ge 24 ] && method="cmd package list packages -3"
	detect="targetSdk=0"
fi
# Detect if /system/app is available
[ -d $SYSTEM/app ] && sysapp=1

# Detect if /system/priv-app is available
[ -d $SYSTEM/priv-app ] && privapp=1

# Detect free space
free_space="$(busybox df -m $MOUNTPATH | tail -n1 | awk '{print $4}')"
total_space="$(busybox df -m $MOUNTPATH | tail -n1 | awk '{print $2}')"

# List installed apps
list_installed_apps() {
	if $RESCAN; then
		if $se_set; then
			if [ "$(getenforce)" == "Enforcing" ]; then
				setenforce 0
			else
				se_set=false
			fi
		fi
		rm $LISTFILE 2>$LOG; app=(); app1=(); app2=();
		for i in $($method | sed 's/.*://'); do
			h=$(((h+1)%4))
			Spinner "加载App列表"
			if ! dumpsys package $i | grep -qEm1 -e "($detect)" - ; then
				app=${i##*/}
				package=$app
				package[c]=$package
				dir_app[c]=/data/app/$app-*/base.apk
				$use_aapt && { app=$(aapt d badging ${dir_app[c]} | grep 'application-label:'); app=${app#*:}; }
				app1[c]=$(echo "$app" | tr ' ' '_' | tr -d "'")
				echo "app${c}^=${app1[c]}^=${dir_app[c]}^=${package[c]}^=" >> $LISTFILE
				c=$((c+1))
			fi
		done
		app2=($(echo "${app1[@]}" | sed "s/.*'//g"))
		app=($(printf '%s\n' "${app2[@]}" | sort -f))
		RESCAN=false
		$se_set && setenforce 1
	fi
}

# List systemized apps
list_systemized_apps() {
	systemized_apps=(); rev_dir=(); rev_label=(); rev_app=()
	systemized_apps=($(find $MODDIR -name "*.apk" -type f))
	cc=1
	for i in ${systemized_apps[@]}; do
		ProgressBar $cc ${#systemized_apps[@]}
		rev_dir[cc]=${i%/*}
		rev_label=${i%/*}
		rev_label[cc]=${rev_label##*/}
		rev_app[cc]=${rev_label[cc]}
		$use_aapt && { rev_app=$(aapt d badging $i | grep 'application-label:'); rev_app=${rev_app#*:}; rev_app[cc]=$(echo $rev_app | tr ' ' '_' | tr -d "'"); }
		cc=$((cc+1))
	done
}

# Check updated apps to resystemize
chk_updates() {
	list_systemized_apps 2>>$LOG
	sleep 0.3
	cc=1
	for i in ${rev_label[@]}; do
		ProgressBar $cc ${#rev_label[@]}
		if $(dumpsys package $i | grep UPDATED_SYSTEM_APP >/dev/null); then
			updated_app[cc]=$i
			#updated_app_name=$(aapt d badging $MODDIR
		fi
	done
	#stub
}

get_cfg() {
	APP_NAME=$(grep -wm1 "=${1}^" $LISTFILE | tr '^=' ' ' | awk '{print $2}')
	DIR_APP=$(grep -wm1 "=${1}^" $LISTFILE | tr '^=' ' ' | awk '{print $3}')
	PKG=$(grep -wm1 "=${1}^" $LISTFILE | tr '^=' ' ' | awk '{print $4}')
	[ $? -gt 0 ] && abort "Package doesn't exist!"
}

# Systemize function
# Usage: systemize <install directory> <apk directory>
systemize() {
	if [ "$2" ]; then
		apkdir="$(echo $2)"
		[ ! -f $apkdir ] && abort " $apkdir doesn't exist!"
		apk=${apkdir##*/}
		[ "$3" ] && PKG="$3"
		if [ "$PKG" ]; then
			name=$PKG
		else
			name=${apkdir%/*}; name=${name##*/}
			name=$(echo $name | tr -d ' ' | tr -d "'" | tr -d '*' | tr -d '-')
			$use_aapt && {
				name=$(aapt d badging $apkdir | head -n1 | awk '{print $2}')
				name=$(echo ${name#*=} | tr -d ' ' | tr -d "'")
			}
		fi
	fi
	chk_apk_size $apkdir
	echo " 移动 ${apk}(${name}) 到 '$1'......"
	if [ -d $SYSTEM/app/${name} ] || [ -d $SYSTEM/priv-app/${name} ] || [ -d $MODDIR$SYSTEM2/app/${name} ] || [ -d $MODDIR$SYSTEM2/priv-app/${name} ]; then
		abort " App 已存在!"
	else
		mkdir -p ${MODDIR}${1}/${name}
		cp -f $apkdir ${MODDIR}${1}/${name}/${name}.apk
		set_perm_recursive  ${MODDIR}${1}/${name} 0 0 0755 0755
		$patch_xml && [ ${1##*/} == "priv-app" ] && {
			echo " 生成权限信息"
			pp=0
			app_perm=(); perm=()
			for i in $(aapt d permissions $apkdir | grep -v 'package:' | awk '{print $2}'); do
				_perm=$(echo ${i#*=} | tr -d "'")
				perm[pp]=$_perm
				pp=$((pp+1))
			done
			app_perm=($(echo "${perm[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
			echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--
	Generated by $MODTITLE by $AUTHOR
-->
<permissions>
    <privapp-permissions package=\"${name}\">" >> $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${name}.xml
			for i in ${app_perm[@]}; do
				echo "        <permission name=\"$i\"/>" >> $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${name}.xml
			done
			echo "    </privapp-permissions>
</permissions>" >> $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${name}.xml
			chmod 644 $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${name}.xml
		}
		echo " ${name} - ${W}Done${N}"
	fi
}

enter_apk_dir() {
	echo -n "输入 APK 路径: "
	read apkdir
	echo "检查文件是否存在......"
	if [ -f "$apkdir" ]; then
		echo " - OK"
		apk=${apkdir##*/}
		echo "检查文件是否为APK......"
		tmpapk=${apk##*.}
		if [ "$tmpapk" == "apk" ]; then
			echo " - OK"
			echo "检查包名......"
			name=${apk%'.apk'*}
			if [ $use_aapt ]; then
				name=$(aapt d badging $apkdir | head -n1 | awk '{print $2}')
				name=${name#*=}
			fi
			name=$(echo $name | tr -d ' ' | tr -d "'")
			echo " - $name"
			if [ $privapp == 1 ] && [ $sysapp == 1 ]; then 
				echo "安装到哪里?"
				echo -n "< 1 - $SYSTEM/app | 2 - $SYSTEM/priv-app > : "
				read loc
				if [ "$loc" == 1 ]; then
					systemize /system/app
				elif [ "$loc" == 2 ]; then
					systemize /system/priv-app
				else
					abort "无效!"
				fi
			elif [ $sysapp == 1 ] && [ $privapp == 0 ]; then
				systemize /system/app
			elif [ $privapp == 1 ] && [ $sysapp == 0 ]; then
				systemize /system/priv-app
			else
				abort "没有指定安装目录!"
			fi
		else
			abort "$apk 不是一个 APK!"
		fi
	else
		abort "$apkdir 不存在!"
	fi
}

enter_apk_name() {
	echo "输入已安装app的标签"
	echo "示例: com.android.launcher"
	echo " x - ${Bl}回到主菜单${N}"
	echo -n " > "
	read apklabel
	if [ ! "$apklabel" ]; then
		abort "错误"
	fi
	if [ -d $SYSTEM/priv-app ]; then
		installdir="priv-app"
	else
		installdir="app"
	fi
	systemize /system/$installdir /data/app/${apklabel}-*/base.apk
	[ $? -ne 0 ] && abort "Failed!"
}

# Check apk size
chk_apk_size() {
	dir_app=$(echo $1)
	free_space="$(busybox df -m $MOUNTPATH | tail -n1 | awk '{print $3}')"
	total_space="$(busybox df -m $MOUNTPATH | tail -n1 | awk '{print $2}')"
	apk_sizeM="$(du -m $dir_app | awk '{print $1}')"
	if [ "$apk_sizeM" -gt "$((free_space-10))" ]; then
		echo " 检查APK大小 - ${W}${apk_sizeM}M${N}"
		echo "- $MOUNTPATH 空间不足 !"
		echo "- APK 大小: ${apk_sizeM}M | $MOUNTPATH 剩余: ${free_space}M"
		echo "- 使用 magisk_merge.img 合并镜像......"
		merge_img ${dir_app} 2>>$LOG
	else
		echo " 检查 APK 大小 - ${W}${apk_sizeM}M${N}"
	fi
}

# Merge
merge_img() {
	apk_size=$(($(du -m $1 | awk '{print $1}')+2))
	IMG=/data/adb/magisk_merge.img
	install_dir=/dev/tmp/${ID}
	path=/dev/magisk_merge
	tmpmodpath=$path/${ID}
	mkdir -p $install_dir
	reqSizeM=$apk_size
	MOUNTPATH=$path
	mount_magisk_img  
	cp -af $MODDIR/. $tmpmodpath
	MODDIR=$tmpmodpath
}

mount -o remount,rw $MOUNTPATH 2>$LOG
mount -o rw,remount $MOUNTPATH 2>$LOG
mount -o remount,rw /cache 2>$LOG
mount -o rw,remount /cache 2>$LOG
busybox mount -o remount,rw $MOUNTPATH 2>$LOG
busybox mount -o rw,remount $MOUNTPATH 2>$LOG
busybox mount -o remount,rw /cache 2>$LOG
busybox mount -o rw,remount /cache 2>$LOG

menu_list_systemized_apps() {
	clear
	list_installed_apps 2>>$LOG
	clear
	echo "$div"
	title_div "已安装 App"
	echo "$div"
	echo ""
	for i in $(seq 0 $((${#app[@]}-1))); do
		echo " $((i+1)) - ${W}${app[i]}${N}" | tr '_' ' '
	done
	echo ""
	echo " ${Bl}要使多个app系统化，请输入多个数字. 示例:${N} \"1 $(echo ${#app[$((${#app[@]}/3))]}) $(echo ${#app[$((${#app[@]}/2))]})\""
	echo " x - ${Bl}回到主菜单${N}"
	echo " r - 刷新列表"
	echo " 0 -  退出"
	echo -n "[选择]: "
	read installed
	[ "$installed" == "x" ] && menu
	[ "$installed" == "r" ] && RESCAN=true && menu_list_systemized_apps
	for i in $installed; do
		if [ "$i" -gt ${#app[@]} ] || [ "$i" -lt 0 ] || [ "$i" == "" ] || [ -n "$(echo $i | tr -d '0-9')" ] ; then
			abort "无效!"
		elif [ "$i" == 0 ]; then
			exit
		else
			echo "$div"
			i=$((i-1))
			echo "正在系统化 ${W}${app[i]}${N}" | tr '_' ' '
			get_cfg ${app[i]}
			echo -n " 检查 APK 目录"
			if [ -f $DIR_APP ]; then
				echo " - ${W}OK${N}"
				apkdir=$DIR_APP
				apk=${apkdir##*/}
				name=${apkdir%/*}; name=${name##*/}; name=$(echo $name | tr -d ' ' | tr -d "'" | tr -d '*' | tr -d '-')
				echo " 检查包名 - ${W}$PKG${N}"
				if [ $privapp == 1 ] && [ $sysapp == 1 ]; then 
					echo " 安装到哪里?"
					echo -n " < 1 - $SYSTEM/app | 2 - $SYSTEM/priv-app | 0 - cancel > : "
					read loc
					if [ "$loc" == 1 ]; then
						systemize /system/app
					elif [ "$loc" == 2 ]; then
						systemize /system/priv-app
					elif [ "$loc" == 0 ]; then
						echo " ${app[i]} 取消系统化"; true
					else
						abort "无效!"
					fi
				elif [ $sysapp == 1 ] && [ $privapp == 0 ]; then
					systemize /system/app
				elif [ $privapp == 1 ] && [ $sysapp == 0 ]; then
					systemize /system/priv-app
				else
					abort " - 没有安装目录!"
				fi  
			else
				abort " - APK 不存在!"
			fi
		fi
	done
	echo "重启以应用更改"
	echo -n "回到主菜单? < y | n >: "
	read mchoice
	[ "$mchoice" == "y" ] && menu || exit
}

revert_apps() {
	list_systemized_apps 2>$LOG
	clear
	echo "$div"
	title_div "恢复"
	echo "$div"
	echo ""
	for i in $(seq 1 $((${#rev_app[@]}-1))); do
		echo " $i - ${W}${rev_app[i]}${N}" | tr '_' ' '
	done
	echo ""
	echo " ${Bl}要使多个app系统化，请输入多个数字. 示例:${N} \"1 $(echo ${#rev_app[$((${#rev_app[@]}/3))]}) $(echo ${#rev_app[$((${#rev_app[@]}/2))]})\""
	echo " x - ${Bl}回到主菜单${N}"
	echo " 0 -  退出"
	echo -n "[选择]: "
	read revert
	[ "$revert" == "x" ] && menu
	for i in $revert; do
		if [ "$i" -gt ${#rev_app[@]} ] || [ "$i" -lt 0 ] || [ "$i" == "" ] || [ -n "$(echo $i | tr -d '0-9')" ] ; then
			abort "无效!"
		elif [ "$i" == 0 ]; then
			exit
		else
			echo "恢复 ${rev_app[i]}......" | tr '_' ' '
			rm -rf ${rev_dir[i]}
			rm -rf $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${rev_label[i]}.xml 2>$LOG >$LOG
		fi
	done
	echo "重启以应用更改"
	echo -n "回到主菜单? < y | n >: "
	read mchoice
	[ "$mchoice" == "y" ] && menu || exit
}

set_selinux() {
	clear
	echo "$div"
	title_div "设置 SELinux"
	echo "$div"
	echo " 此设置开启了动态禁用功能"
	echo " 如果这个功能被启用 (只有在需要时才允许不受限制的操作)"
	echo " 会使脚本执行速度明显加快."
	echo " 这样做是相当安全的，因为它在操作之后会"
	echo " 立即恢复 SELinux 状态."
	echo "$div"
	echo ""
	stat_color=$G
	se_set="$(grep_prop selinux $MODDIR/module.prop)"
	[ "$se_set" != true ] && se_set=false && stat_color=$R
	echo " SELinux 状态: $(getenforce)"
	echo " Enabled: ${stat_color}$se_set${N}"
	[ $(getenforce) == "Permissive" ] && echo " ${Y}SELinux 已禁用! 如果它是 Permissive 的,就不需要启用它 ${N}"
	echo ""
	echo " c - ${W}更改状态${N}"
	echo " x - ${Bl}回到主菜单${N}"
	echo " 0 - 退出"
	echo -n "[选择]: "
	read sechoice
	case "$sechoice" in
		x|X) menu;;
		c|C) if $se_set; then
				set_file_prop selinux false $MODDIR/module.prop
				echo "设置为 false"
				echo "退出脚本以应用更改"
				exit
			else
				set_file_prop selinux true $MODDIR/module.prop
				echo "Set to true"
				echo "退出脚本以应用更改"
				exit
			fi;;
		0) exit;;
		*) echo "无效!"; exit;;
	esac
}

menu() {
	mod_head
	stat_color=$G
	se_set="$(grep_prop selinux $MODDIR/module.prop)"
	[ "$se_set" != true ] && se_set=false && stat_color=$R
	echo "设置 SELinux 启用: ${stat_color}$se_set${N}"
	echo "SELinux 状态: $(getenforce)"
	echo "$div"
	echo ""
	echo " 1 - 系统化已安装App (列出已安装App)"
	echo " 2 - 系统化已安装App (输入App名称) "
	echo " 3 - 系统化指定的 APK"
	if [[ $(find $MODDIR -name "*.apk" 2>$LOG) ]]; then
		echo " 4 - 恢复系统化的App"
		#echo " 5 - Update apks"
	fi
	echo " s - 设置 SELinux"
	echo " d - ${C}捐赠${N}"
	echo " 0 - 退出"
	echo ""
	echo -n "[选择]: "
	read choice
	if [ "$choice" == 1 ]; then
		menu_list_systemized_apps
	elif [ "$choice" == 2 ]; then
		clear
		enter_apk_name
		exit $?
	elif [ "$choice" == 3 ]; then
		clear
		enter_apk_dir
		exit $?
	elif [ "$choice" == 4 ]; then
		clear
		revert_apps
		exit $?
	elif [ "$choice" == 5 ]; then
		clear
		#chk_updates
		exit $?

	elif [ "$choice" == "d" ] || [ "$choice" == "D" ]; then
		am start https://paypal.me/veez21 >$LOG
	elif [ "$choice" == "logs" ]; then
		upload_logs
	elif [ "$choice" == "s" ]; then
		set_selinux
	elif [ "$choice" == 0 ]; then
		exit
	else  echo "无效!"
		exit 1
	fi
}

case "$1" in
	-a) shift
		for i in "$@"; do [ -d $SYSTEM/priv-app ] && systemize /system/priv-app "/data/app/${i}-*/base.apk" || systemize /system/app "/data/app/${i}-*/base.apk" "$i"; echo "$div"; done; exit;;
	-d) shift
		for i in "$@"; do [ -d $SYSTEM/priv-app ] && systemize /system/priv-app "$i" || systemize /system/app "$i"; echo "$div"; done; exit;;
	-l) list_systemized_apps 2>>$LOG
		echo
		for i in ${!rev_dir[@]}; do
			title_div "App $i"
			echo "Name\t: $(echo ${rev_app[i]}| tr '_' ' ')\nLabel\t: ${rev_label[i]}\nDirectory\t: $(echo ${rev_dir[i]} | sed 's/.*\/system\///g')" | expand -t 10
		done
		exit;;
	-h|--help) help_me;;
esac

menu
exit $?
